version: '3.8'

services:
  # Redis service for Socket.IO adapter
  redis:
    image: redis:7-alpine
    container_name: socketio-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # WebSocket Server 1
  websocket-server-1:
    build: .
    container_name: socketio-server-1
    ports:
      - "3001:3000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_ID=server-1
      - NODE_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    stdin_open: true
    tty: true
    restart: unless-stopped

  # WebSocket Server 2
  websocket-server-2:
    build: .
    container_name: socketio-server-2
    ports:
      - "3002:3000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_ID=server-2
      - NODE_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    stdin_open: true
    tty: true
    restart: unless-stopped

  # WebSocket Server 3
  websocket-server-3:
    build: .
    container_name: socketio-server-3
    ports:
      - "3003:3000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVER_ID=server-3
      - NODE_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    stdin_open: true
    tty: true
    restart: unless-stopped

  # Nginx Load Balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: socketio-nginx
    ports:
      - "3000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - websocket-server-1
      - websocket-server-2
      - websocket-server-3
    restart: unless-stopped

volumes:
  redis-data:
    driver: local
